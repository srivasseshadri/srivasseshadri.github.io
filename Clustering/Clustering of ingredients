{
 "cells": [
  {
   "cell_type": "code",
   "execution_count": 1,
   "metadata": {},
   "outputs": [],
   "source": [
    "import findspark\n",
    "findspark.init()\n",
    "import pyspark\n",
    "from random import random\n",
    "from pyspark import SparkContext\n",
    "\n",
    "from pyspark.mllib.clustering import KMeans, KMeansModel"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "4115 srs418\n"
     ]
    }
   ],
   "source": [
    "import os\n",
    "port = 4040 + hash(os.getcwd().split(\"/\")[2])%200\n",
    "config = pyspark.SparkConf().set('spark.executor.memory', '512M')\\\n",
    "         .set('spark.cores.max', '2')\\\n",
    "         .set('spark.port.maxRetries','200')\\\n",
    "         .set('spark.ui.port', port)    \n",
    "print port,     os.getcwd().split(\"/\")[2]\n",
    "sc = pyspark.SparkContext(appName=\"Clustering\", master='spark://polyp1:7077',conf = config )"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "metadata": {},
   "outputs": [],
   "source": [
    "data = sc.textFile(\"/scratch/ISE495/lab_05_Clustering/nutrient.dat\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[u'BEEF BRAISED,340,20,28,9,2.6',\n",
       " u'HAMBURGER,245,21,17,9,2.7',\n",
       " u'BEEF ROAST,420,15,39,7,2.0',\n",
       " u'BEEF STEAK,375,19,32,9,2.6',\n",
       " u'BEEF CANNED,180,22,10,17,3.7']"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.take(5)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pyspark.rdd.RDD"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(data)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "metadata": {},
   "outputs": [],
   "source": [
    "import numpy as np"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "metadata": {},
   "outputs": [],
   "source": [
    "parsedData = data.map(lambda s: s.split(\",\")).map(lambda a: [a[0], [ float(i) for i  in a[1:]  ]    ])\n",
    "parsedData = parsedData.cache()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "pyspark.rdd.PipelinedRDD"
      ]
     },
     "execution_count": 7,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "type(parsedData)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[u'BEEF BRAISED', [340.0, 20.0, 28.0, 9.0, 2.6]],\n",
       " [u'HAMBURGER', [245.0, 21.0, 17.0, 9.0, 2.7]],\n",
       " [u'BEEF ROAST', [420.0, 15.0, 39.0, 7.0, 2.0]],\n",
       " [u'BEEF STEAK', [375.0, 19.0, 32.0, 9.0, 2.6]],\n",
       " [u'BEEF CANNED', [180.0, 22.0, 10.0, 17.0, 3.7]],\n",
       " [u'CHICKEN BROILED', [115.0, 20.0, 3.0, 8.0, 1.4]],\n",
       " [u'CHICKEN CANNED', [170.0, 25.0, 7.0, 12.0, 1.5]],\n",
       " [u'BEEF HEART', [160.0, 26.0, 5.0, 14.0, 5.9]],\n",
       " [u'LAMB LEG ROAST', [265.0, 20.0, 20.0, 9.0, 2.6]],\n",
       " [u'LAMB SHOULDER ROAST', [300.0, 18.0, 25.0, 9.0, 2.3]],\n",
       " [u'SMOKED HAM', [340.0, 20.0, 28.0, 9.0, 2.5]],\n",
       " [u'PORK ROAST', [340.0, 19.0, 29.0, 9.0, 2.5]],\n",
       " [u'PORK SIMMERED', [355.0, 19.0, 30.0, 9.0, 2.4]],\n",
       " [u'BEEF TONGUE', [205.0, 18.0, 14.0, 7.0, 2.5]],\n",
       " [u'VEAL CUTLET', [185.0, 23.0, 9.0, 9.0, 2.7]],\n",
       " [u'BLUEFISH BAKED', [135.0, 22.0, 4.0, 25.0, 0.6]],\n",
       " [u'CLAMS RAW', [70.0, 11.0, 1.0, 82.0, 6.0]],\n",
       " [u'CLAMS CANNED', [45.0, 7.0, 1.0, 74.0, 5.4]],\n",
       " [u'CRABMEAT CANNED', [90.0, 14.0, 2.0, 38.0, 0.8]],\n",
       " [u'HADDOCK FRIED', [135.0, 16.0, 5.0, 15.0, 0.5]],\n",
       " [u'MACKEREL BROILED', [200.0, 19.0, 13.0, 5.0, 1.0]],\n",
       " [u'MACKEREL CANNED', [155.0, 16.0, 9.0, 157.0, 1.8]],\n",
       " [u'PERCH FRIED', [195.0, 16.0, 11.0, 14.0, 1.3]],\n",
       " [u'SALMON CANNED', [120.0, 17.0, 5.0, 159.0, 0.7]],\n",
       " [u'SARDINES CANNED', [180.0, 22.0, 9.0, 367.0, 2.5]],\n",
       " [u'TUNA CANNED', [170.0, 25.0, 7.0, 7.0, 1.2]],\n",
       " [u'SHRIMP CANNED', [110.0, 23.0, 1.0, 98.0, 2.6]]]"
      ]
     },
     "execution_count": 31,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parsedData.take(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "PythonRDD[6] at RDD at PythonRDD.scala:48"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parsedData.values()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 57,
   "metadata": {},
   "outputs": [],
   "source": [
    "k = 4\n",
    "clusters = KMeans.train(parsedData.values(), k, maxIterations=10, initializationMode=\"random\")\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 58,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[array([ 361.66666667,   18.66666667,   31.        ,    8.66666667,\n",
       "           2.43333333]),\n",
       " array([ 270.        ,   19.66666667,   20.66666667,    9.        ,\n",
       "           2.53333333]),\n",
       " array([ 113.33333333,   16.        ,    4.33333333,  156.16666667,\n",
       "           3.16666667]),\n",
       " array([ 161.66666667,   20.5       ,    7.5       ,   14.25      ,    1.925     ])]"
      ]
     },
     "execution_count": 58,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "clusters.centers"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0\n",
      "1\n"
     ]
    }
   ],
   "source": [
    "print  clusters.predict([ 148.55555556,   19.        ,    6.44444444,   61.55555556,\n",
    "           2.33888889] )\n",
    "print  clusters.predict( [ 331.11111111,   19.        ,   27.55555556,    8.77777778,\n",
    "           2.46666667] )\n"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 59,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "[[u'BEEF BRAISED', 0],\n",
       " [u'HAMBURGER', 1],\n",
       " [u'BEEF ROAST', 0],\n",
       " [u'BEEF STEAK', 0],\n",
       " [u'BEEF CANNED', 3],\n",
       " [u'CHICKEN BROILED', 3],\n",
       " [u'CHICKEN CANNED', 3],\n",
       " [u'BEEF HEART', 3],\n",
       " [u'LAMB LEG ROAST', 1],\n",
       " [u'LAMB SHOULDER ROAST', 1],\n",
       " [u'SMOKED HAM', 0],\n",
       " [u'PORK ROAST', 0],\n",
       " [u'PORK SIMMERED', 0],\n",
       " [u'BEEF TONGUE', 3],\n",
       " [u'VEAL CUTLET', 3],\n",
       " [u'BLUEFISH BAKED', 3],\n",
       " [u'CLAMS RAW', 2],\n",
       " [u'CLAMS CANNED', 2],\n",
       " [u'CRABMEAT CANNED', 3],\n",
       " [u'HADDOCK FRIED', 3],\n",
       " [u'MACKEREL BROILED', 3],\n",
       " [u'MACKEREL CANNED', 2],\n",
       " [u'PERCH FRIED', 3],\n",
       " [u'SALMON CANNED', 2],\n",
       " [u'SARDINES CANNED', 2],\n",
       " [u'TUNA CANNED', 3],\n",
       " [u'SHRIMP CANNED', 2]]"
      ]
     },
     "execution_count": 59,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "parsedData.map(lambda s: [s[0],clusters.predict(s[1])]).take(100)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 60,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "-------\n",
      " Cluster 0\n",
      "[u'BEEF BRAISED', 340.0]\n",
      "[u'BEEF ROAST', 420.0]\n",
      "[u'BEEF STEAK', 375.0]\n",
      "[u'SMOKED HAM', 340.0]\n",
      "[u'PORK ROAST', 340.0]\n",
      "[u'PORK SIMMERED', 355.0]\n",
      "-------\n",
      " Cluster 2\n",
      "[u'CLAMS RAW', 70.0]\n",
      "[u'CLAMS CANNED', 45.0]\n",
      "[u'MACKEREL CANNED', 155.0]\n",
      "[u'SALMON CANNED', 120.0]\n",
      "[u'SARDINES CANNED', 180.0]\n",
      "[u'SHRIMP CANNED', 110.0]\n",
      "-------\n",
      " Cluster 1\n",
      "[u'HAMBURGER', 245.0]\n",
      "[u'LAMB LEG ROAST', 265.0]\n",
      "[u'LAMB SHOULDER ROAST', 300.0]\n",
      "-------\n",
      " Cluster 3\n",
      "[u'VEAL CUTLET', 185.0]\n",
      "[u'BLUEFISH BAKED', 135.0]\n",
      "[u'CRABMEAT CANNED', 90.0]\n",
      "[u'HADDOCK FRIED', 135.0]\n",
      "[u'MACKEREL BROILED', 200.0]\n",
      "[u'PERCH FRIED', 195.0]\n",
      "[u'TUNA CANNED', 170.0]\n",
      "[u'BEEF CANNED', 180.0]\n",
      "[u'CHICKEN BROILED', 115.0]\n",
      "[u'CHICKEN CANNED', 170.0]\n",
      "[u'BEEF HEART', 160.0]\n",
      "[u'BEEF TONGUE', 205.0]\n"
     ]
    }
   ],
   "source": [
    "for kv in parsedData.map(lambda s: [clusters.predict(s[1]),  [s[0],s[1][0] ]   ]).groupByKey().collect():\n",
    "    print \"-------\\n Cluster\",kv[0]\n",
    "    for v in kv[1]:\n",
    "        print v"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 54,
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "k = 1  Within Set Sum of Squared Error = 2912.811461\n",
      "k = 2  Within Set Sum of Squared Error = 2246.315669\n",
      "k = 3  Within Set Sum of Squared Error = 1748.582724\n",
      "k = 4  Within Set Sum of Squared Error = 1098.296062\n",
      "k = 5  Within Set Sum of Squared Error = 919.059166\n",
      "k = 6  Within Set Sum of Squared Error = 842.906217\n",
      "k = 7  Within Set Sum of Squared Error = 719.532379\n",
      "k = 8  Within Set Sum of Squared Error = 776.197046\n",
      "k = 9  Within Set Sum of Squared Error = 591.917505\n",
      "k = 10  Within Set Sum of Squared Error = 613.051319\n"
     ]
    }
   ],
   "source": [
    "from math import sqrt\n",
    "def error(point):\n",
    "    center = clusters.centers[clusters.predict(point)]\n",
    "    return sqrt(sum([x**2 for x in (point - center)]))\n",
    "\n",
    "ks = []\n",
    "Errors=[]\n",
    "for k in range(1,11):\n",
    "    clusters = KMeans.train(parsedData.values(), k,  maxIterations=20, initializationMode=\"random\")\n",
    "    # Evaluate clustering by computing Within Set Sum of Squared Errors\n",
    "    WSSSE = parsedData.values().map(lambda point: error(point)).reduce(lambda x, y: x + y)\n",
    "    print \"k = %d  Within Set Sum of Squared Error = %f\" % (k,  WSSSE )  \n",
    "    ks.append(k)\n",
    "    Errors.append(WSSSE)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 56,
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 432x288 with 1 Axes>"
      ]
     },
     "metadata": {
      "needs_background": "light"
     },
     "output_type": "display_data"
    }
   ],
   "source": [
    "\n",
    "import matplotlib\n",
    "import matplotlib.pyplot\n",
    "import matplotlib.pyplot as plt\n",
    "%matplotlib inline \n",
    "\n",
    "\n",
    "plt.plot(ks,Errors )\n",
    "plt.grid(True)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": []
  },
  {
   "cell_type": "code",
   "execution_count": null,
   "metadata": {},
   "outputs": [],
   "source": [
    "sc.stop()"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 2",
   "language": "python",
   "name": "python2"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 2
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython2",
   "version": "2.7.9"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 2
}
